---
- hosts: all
  sudo: False
  vars:
    openstack_identity_demo_password: password
    openstack_network_internal_name: demo-net
    openstack_network_internal_subnet_name: demo-subnet
    openstack_network_internal_subnet_cidr: 192.168.0.0/24
    openstack_network_internal_subnet_dns_nameservers: 8.8.8.8
    openstack_network_internal_subnet_gateway_ip: 192.168.0.1
    openstack_router_name: demo-router
  tasks:

    - name: update admin.openrc from template
      template:
        src: templates/admin.openrc
        dest: "{{ ansible_env.PWD }}/admin.openrc"
        owner: "{{ ansible_ssh_user }}"

    - name: create demo tenant
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: demo
        tenant_description: "Demo Tenant"

    - name: create demo user
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: demo
        user: demo
        password: "{{ openstack_identity_demo_password }}"

    - name: associate _member_ role with demo user
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: demo
        user: demo
        role: _member_

    - name: update demo.openrc from template
      template:
        src: templates/demo.openrc
        dest: "{{ ansible_env.PWD }}/demo.openrc"
        owner: "{{ ansible_ssh_user }}"

    # Ansible neutron modules lists all tenants to get ids, but this is not
    # permitted for non-admin users. Need to fix neutron_* modules as non-admin
    # *should* be able to create networks, associate floating ips, etc.

    - name: ensure demo user has admin role
      keystone_user:
        endpoint: "{{ openstack_identity_admin_url }}"
        token: "{{ openstack_identity_admin_token }}"
        tenant: demo
        user: demo
        role: admin

    - name: ensure internal network is registered
      neutron_network:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: demo
        login_username: demo
        login_password: "{{ openstack_identity_demo_password }}"
        tenant_name: demo
        name: "{{ openstack_network_internal_name }}"
        state: present
      register: openstack_network_internal

    - name: ensure subnet internal network is registered
      neutron_subnet:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: demo
        login_username: demo
        login_password: "{{ openstack_identity_demo_password }}"
        tenant_name: demo
        name: "{{ openstack_network_internal_subnet_name }}"
        network_name: "{{ openstack_network_internal_name }}"
        cidr: "{{ openstack_network_internal_subnet_cidr }}"
        enable_dhcp: true
        gateway_ip: "{{ openstack_network_internal_subnet_gateway_ip }}"
        dns_nameservers: >
          {{ openstack_network_internal_subnet_dns_nameservers }}
        state: present

    - name: ensure router exists
      neutron_router:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: demo
        login_username: demo
        login_password: "{{ openstack_identity_demo_password }}"
        tenant_name: demo
        name: "{{ openstack_router_name }}"
        state: present

    - name: ensure router has interface connected to internal network
      neutron_router_interface:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: demo
        login_username: demo
        login_password: "{{ openstack_identity_demo_password }}"
        tenant_name: demo
        router_name: "{{ openstack_router_name }}"
        subnet_name: "{{ openstack_network_internal_subnet_name }}"
        state: present

    - name: ensure router has external network gateway
      neutron_router_gateway:
        auth_url: "{{ openstack_identity_public_url }}"
        login_tenant_name: demo
        login_username: demo
        login_password: "{{ openstack_identity_demo_password }}"
        router_name: "{{ openstack_router_name }}"
        network_name: "{{ openstack_network_external_name }}"
        state: present

    - name: ping router external interface to verify connectivity
      command: ping -c 4 {{ openstack_network_external_router_ip }}
      changed_when: false

