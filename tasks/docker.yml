---
- name: ensure dockerfile directories exist
  file:
    path: "{{ item }}"
    owner: "{{ ansible_ssh_user }}"
    state: directory
  with_items:
    - "{{ ansible_env.PWD }}/.ansible_cache"
    - "{{ ansible_env.PWD }}/.ansible_cache/docker"

- name: synchronize role to remote cache for Dockerfile build
  synchronize:
    src: ../
    dest: "{{ ansible_env.PWD }}/.ansible_cache/docker/neutron-network"
    archive: no
    checksum: yes
    recursive: yes

- name: ensure docker image configuration directory exists
  file:
    path: "{{ item }}"
    owner: "{{ ansible_ssh_user }}"
    state: directory
  with_items:
    - "{{ ansible_env.PWD }}/.ansible_cache/docker/neutron-network/provisioning/group_vars"

- name: update configuration used to build docker image from template
  template:
    src: ansible_cache/docker/neutron-network/provisioning/group_vars/all.yml
    owner: "{{ ansible_ssh_user }}"
    dest: "{{ ansible_env.PWD }}/.ansible_cache/docker/neutron-network/provisioning/group_vars/all.yml"

- name: ensure neutron docker image has been built
  docker_image:
    name: "{{ neutron_network_docker_username }}/{{ neutron_network_docker_imagename }}"
    path: "{{ ansible_env.PWD }}/.ansible_cache/docker/neutron-network"
    state: present

- name: ensure neutron data container exists
  docker:
    image: "{{ neutron_network_docker_username }}/{{ neutron_network_docker_imagename }}"
    name: "{{ neutron_network_docker_containername }}_data"
    command: >
      ansible-playbook 
        -i inventories/local.ini provisioning/configure.yml -e '{ 
          "openstack_log_verbose" : "{{ openstack_log_verbose }}",
          "openstack_log_debug" : "{{ openstack_log_debug }}",
          "openstack_rabbitmq_host" : "{{ openstack_rabbitmq_host }}",
          "openstack_rabbitmq_port" : "{{ openstack_rabbitmq_port }}",
          "openstack_rabbitmq_neutron_password" :
            "{{ openstack_rabbitmq_neutron_password }}",
          "openstack_mysql_host" : "{{ openstack_mysql_host }}",
          "openstack_mysql_port" : "{{ openstack_mysql_port }}",
          "openstack_mysql_neutron_password" :
            "{{ openstack_mysql_neutron_password }}",
          "openstack_compute_endpoint_host" : 
            "{{ openstack_compute_endpoint_host }}"
          "openstack_identity_endpoint_host" : 
            "{{ openstack_identity_endpoint_host }}",
          "openstack_identity_internal_url" : 
            "{{ openstack_identity_internal_url }}",
          "openstack_identity_neutron_password" : 
            "{{ openstack_identity_neutron_password }}",
          "openstack_default_region" : "{{ openstack_default_region }}",
          "openstack_compute_metadata_secret" : 
            "{{ openstack_compute_metadata_secret }}" }'
    detach: no
    state: present

- name: wait until configuration is completed
  command: docker wait "{{ neutron_network_docker_containername }}_data"
  register: docker_wait
  changed_when: false

- name: collect configuration log
  command: docker logs "{{ neutron_network_docker_containername }}_data"
  register: configure_log
  changed_when: false

- name: display configuration log
  debug:
    msg: "{{ configure_log.stdout_lines }}"

- name: fail on configuration failure
  assert:
    that: docker_wait.stdout == "0"

- name: ensure neutron service is running
  docker:
    image: "{{ neutron_network_docker_username }}/{{ neutron_network_docker_imagename }}"
    name: "{{ neutron_network_docker_containername }}_server"
    volumes_from: "{{ neutron_network_docker_containername }}_data"
    ports:
      - 9696:9696
    privileged: yes
    detach: yes
    state: running

